from src.services import ItemService, MovimentacaoService
from src.cli.menu_itens import MenuItens
from src.cli.menu_movimentacoes import MenuMovimentacoes
from src.utils.helpers import limpar_tela, input_int
from src.core.auth import Autenticador

class MenuPrincipal:
    def __init__(self):
        self.item_service = ItemService()
        self.mov_service = MovimentacaoService()
        self.menu_itens = MenuItens(self.item_service)
        self.menu_mov = MenuMovimentacoes(self.mov_service, self.item_service)

    def exibir(self):
        """Exibe o menu principal e gerencia o fluxo do sistema"""
        while True:
            limpar_tela()
            print("====================================")
            print("=== SISTEMA DE ALMOXARIFADO v1.0 ===")
            print("====================================")
            print("\nMENU PRINCIPAL")
            print("1. Gerenciar Itens")
            print("2. Movimenta√ß√µes de Estoque")
            print("3. Relat√≥rios")
            print("4. Sair")

            opcao = input("\nOp√ß√£o: ").strip()

            if opcao == "1":
                self.menu_itens.exibir()
            elif opcao == "2":
                self.menu_mov.exibir()
            elif opcao == "3":
                self.exibir_relatorios()
            elif opcao == "4":
                print("\nSaindo do sistema...")
                break
            else:
                print("\nOp√ß√£o inv√°lida! Tente novamente.")
                input("Pressione Enter para continuar...")

    def exibir_relatorios(self):
        """Submenu de relat√≥rios"""
        while True:
            limpar_tela()
            print("\n=== RELAT√ìRIOS ===")
            print("1. Itens pr√≥ximos da validade")
            print("2. Itens com estoque baixo")
            print("3. Movimenta√ß√µes por per√≠odo")
            print("4. Voltar")

            opcao = input("\nOp√ß√£o: ").strip()

            if opcao == "1":
                self.relatorio_prox_validade()
            elif opcao == "2":
                self.relatorio_estoque_baixo()
            elif opcao == "3":
                self.relatorio_movimentacoes_periodo()
            elif opcao == "4":
                break
            else:
                print("Op√ß√£o inv√°lida!")
                input("Pressione Enter para continuar...")

    def relatorio_prox_validade(self):
        """Relat√≥rio de itens pr√≥ximos da validade"""
        dias = input_int("\nInforme os dias para expira√ß√£o (padr√£o 30): ", 30)
        itens = self.item_service.itens_prox_validade(dias)

        print(f"\n‚è≥ ITENS QUE EXPIREM EM {dias} DIAS:")
        if not itens:
            print("Nenhum item encontrado.")
        else:
            for item in itens:
                print(f"- {item.nome} (Validade: {item.data_validade} | Estoque: {item.quantidade})")

        input("\nPressione Enter para voltar...")

    def relatorio_estoque_baixo(self):
        """Relat√≥rio de itens com estoque abaixo do m√≠nimo"""
        minimo = input_int("\nInforme o estoque m√≠nimo (padr√£o 5): ", 5)
        itens = [item for item in self.item_service.listar_todos() if item.quantidade < minimo]

        print(f"\n‚ö†Ô∏è ITENS COM ESTOQUE ABAIXO DE {minimo}:")
        if not itens:
            print("Nenhum item encontrado.")
        else:
            for item in itens:
                print(f"- {item.nome} (Estoque: {item.quantidade})")

        input("\nPressione Enter para voltar...")

    def relatorio_movimentacoes_periodo(self):
        """Relat√≥rio de movimenta√ß√µes por per√≠odo"""
        print("\nüìÖ RELAT√ìRIO POR PER√çODO")
        data_inicio = input("Data inicial (DD/MM/AAAA): ")
        data_fim = input("Data final (DD/MM/AAAA): ")

        # Aqui voc√™ implementaria a l√≥gica para filtrar por data
        print("\nFuncionalidade em desenvolvimento!")
        input("Pressione Enter para voltar...")

    @classmethod
    def iniciar_sistema(cls):
        """M√©todo principal para iniciar o sistema"""
        if not Autenticador.login():
            print("Acesso negado. Encerrando...")
            return

        sistema = cls()
        sistema.exibir()